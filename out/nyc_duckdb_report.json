{
  "summary": {
    "passed_all": 1,
    "total": 5
  },
  "results": [
    {
      "id": "q1",
      "question": "픽업 동네별(nyc.trips_small.pickup_ntaname) 트립 수 Top 10",
      "gold_sql": "SELECT pickup_ntaname, COUNT(*) AS cnt FROM nyc.trips_small WHERE pickup_ntaname IS NOT NULL AND pickup_ntaname <> '' GROUP BY 1 ORDER BY 2 DESC LIMIT 10",
      "pred_sql": "SELECT pickup_ntaname, COUNT(*) AS cnt FROM nyc.trips_small WHERE pickup_ntaname IS NOT NULL AND pickup_ntaname <> '' GROUP BY 1 ORDER BY cnt DESC;",
      "metrics": [
        {
          "name": "executable_sql",
          "score": 1.0,
          "threshold": 1.0,
          "reason": "ok"
        },
        {
          "name": "execution_accuracy",
          "score": 0.0,
          "threshold": 1.0,
          "reason": "mismatch(all candidates)"
        },
        {
          "name": "semantic_match_sql",
          "score": 0.0,
          "threshold": 1.0,
          "reason": "different"
        },
        {
          "name": "component_match_sql",
          "score": 0.9500000000000001,
          "threshold": 0.85,
          "reason": "weighted jaccard; best=0.950"
        }
      ],
      "passed_all": false
    },
    {
      "id": "q2",
      "question": "승객 수(passenger_count)별 평균 total_amount를 내림차순",
      "gold_sql": "SELECT passenger_count, AVG(total_amount) AS avg_total FROM nyc.trips_small GROUP BY 1 ORDER BY 2 DESC",
      "pred_sql": "SELECT passenger_count, AVG(total_amount) AS avg_total, COUNT(*) AS cnt FROM nyc.trips_small WHERE passenger_count IS NOT NULL  GROUP BY  1 ORDER BY cnt DESC;",
      "metrics": [
        {
          "name": "executable_sql",
          "score": 1.0,
          "threshold": 1.0,
          "reason": "ok"
        },
        {
          "name": "execution_accuracy",
          "score": 0.0,
          "threshold": 1.0,
          "reason": "mismatch(all candidates)"
        },
        {
          "name": "semantic_match_sql",
          "score": 0.0,
          "threshold": 1.0,
          "reason": "different"
        },
        {
          "name": "component_match_sql",
          "score": 0.675,
          "threshold": 0.85,
          "reason": "weighted jaccard; best=0.675"
        }
      ],
      "passed_all": false
    },
    {
      "id": "q3",
      "question": "2015년 1~3월 월별 trip_distance 합계",
      "gold_sql": "SELECT EXTRACT(MONTH FROM pickup_datetime) AS mon, SUM(trip_distance) AS dist FROM nyc.trips_small WHERE EXTRACT(YEAR FROM pickup_datetime)=2015 AND EXTRACT(MONTH FROM pickup_datetime) IN (1,2,3) GROUP BY 1 ORDER BY 1",
      "pred_sql": "SELECT EXTRACT(MONTH FROM pickup_datetime) AS mon, SUM(trip_distance) AS dist FROM nyc.trips_small WHERE EXTRACT(YEAR FROM pickup_datetime)=2015 AND EXTRACT(MONTH FROM pickup_datetime) IN (1,2,3) GROUP BY 1 ORDER BY cnt DESC;",
      "metrics": [
        {
          "name": "executable_sql",
          "score": 0.0,
          "threshold": 1.0,
          "reason": "exec error: Binder Error: Referenced column \"cnt\" not found in FROM clause!\nCandidate bindings: \"pickup_ntaname\", \"payment_type\", \"extra\"\n\nLINE 1: ...(MONTH FROM pickup_datetime) IN (1,2,3) GROUP BY 1 ORDER BY cnt DESC;\n                                                                       ^"
        },
        {
          "name": "execution_accuracy",
          "score": 0.0,
          "threshold": 1.0,
          "reason": "mismatch(all candidates)"
        },
        {
          "name": "semantic_match_sql",
          "score": 0.0,
          "threshold": 1.0,
          "reason": "different"
        },
        {
          "name": "component_match_sql",
          "score": 0.9500000000000001,
          "threshold": 0.85,
          "reason": "weighted jaccard; best=0.950"
        }
      ],
      "passed_all": false
    },
    {
      "id": "q4",
      "question": "팁 비율(tip_amount/total_amount) 상위 20건의 pickup/dropoff 동네",
      "gold_sql": "SELECT pickup_ntaname, dropoff_ntaname, tip_amount/NULLIF(total_amount,0) AS tip_ratio FROM nyc.trips_small WHERE total_amount>0 ORDER BY tip_ratio DESC LIMIT 20",
      "pred_sql": "SELECT pickup_ntaname, dropoff_ntaname, tip_amount/NULLIF(total_amount,0) AS tip_ratio FROM nyc.trips_small WHERE total_amount > 0 ORDER BY tip_ratio DESC LIMIT 20;",
      "metrics": [
        {
          "name": "executable_sql",
          "score": 1.0,
          "threshold": 1.0,
          "reason": "ok"
        },
        {
          "name": "execution_accuracy",
          "score": 0.0,
          "threshold": 1.0,
          "reason": "mismatch(all candidates)"
        },
        {
          "name": "semantic_match_sql",
          "score": 1.0,
          "threshold": 1.0,
          "reason": "equal(any candidate)"
        },
        {
          "name": "component_match_sql",
          "score": 1.0,
          "threshold": 0.85,
          "reason": "weighted jaccard; best=1.000"
        }
      ],
      "passed_all": false
    },
    {
      "id": "q5",
      "question": "결제수단(payment_type)별 평균 total_amount와 건수",
      "gold_sql": "SELECT payment_type, AVG(total_amount) AS avg_total, COUNT(*) AS cnt FROM nyc.trips_small GROUP BY 1 ORDER BY 3 DESC",
      "pred_sql": "SELECT payment_type, AVG(total_amount) AS avg_total, COUNT(*) AS cnt FROM nyc.trips_small WHERE payment_type IS NOT NULL AND payment_type <> '' GROUP BY 1 ORDER BY cnt DESC;",
      "metrics": [
        {
          "name": "executable_sql",
          "score": 1.0,
          "threshold": 1.0,
          "reason": "ok"
        },
        {
          "name": "execution_accuracy",
          "score": 1.0,
          "threshold": 1.0,
          "reason": "match(candidate)"
        },
        {
          "name": "semantic_match_sql",
          "score": 0.0,
          "threshold": 1.0,
          "reason": "different"
        },
        {
          "name": "component_match_sql",
          "score": 0.8,
          "threshold": 0.85,
          "reason": "weighted jaccard; best=0.800"
        }
      ],
      "passed_all": true
    }
  ]
}