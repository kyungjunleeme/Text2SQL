{
  "summary": {
    "passed_all": 2,
    "total": 2
  },
  "results": [
    {
      "id": "q1",
      "question": "부서별 직원 수를 세어 부서명 오름차순으로 보여줘",
      "gold_sql": [
        "SELECT d.name AS dept, COUNT(*) AS cnt FROM employees e JOIN departments d ON e.dept_id = d.id GROUP BY d.name ORDER BY d.name",
        "SELECT name AS dept, COUNT(*) AS cnt FROM (SELECT e.dept_id, d.name FROM employees e JOIN departments d ON e.dept_id = d.id) t GROUP BY name ORDER BY name"
      ],
      "pred_sql": "SELECT d.name AS dept, COUNT(e.id) AS cnt FROM employees e JOIN departments d ON e.dept_id = d.id GROUP BY d.name ORDER BY d.name ASC",
      "metrics": [
        {
          "name": "executable_sql",
          "score": 1.0,
          "threshold": 1.0,
          "reason": "ok"
        },
        {
          "name": "execution_accuracy",
          "score": 1.0,
          "threshold": 1.0,
          "reason": "match(candidate)"
        },
        {
          "name": "semantic_match_sql",
          "score": 0.0,
          "threshold": 1.0,
          "reason": "different"
        },
        {
          "name": "component_match_sql",
          "score": 0.8833333333333334,
          "threshold": 0.85,
          "reason": "weighted jaccard; best=0.883"
        }
      ],
      "passed_all": true
    },
    {
      "id": "q2",
      "question": "각 부서의 평균 급여를 계산해 높은 순서로 보여줘",
      "gold_sql": "SELECT d.name AS dept, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.dept_id = d.id GROUP BY d.name ORDER BY avg_salary DESC",
      "pred_sql": "SELECT d.name AS dept, AVG(e.salary) AS avg_salary FROM employees e JOIN departments d ON e.dept_id = d.id GROUP BY d.name ORDER BY avg_salary DESC",
      "metrics": [
        {
          "name": "executable_sql",
          "score": 1.0,
          "threshold": 1.0,
          "reason": "ok"
        },
        {
          "name": "execution_accuracy",
          "score": 1.0,
          "threshold": 1.0,
          "reason": "match(candidate)"
        },
        {
          "name": "semantic_match_sql",
          "score": 1.0,
          "threshold": 1.0,
          "reason": "equal(any candidate)"
        },
        {
          "name": "component_match_sql",
          "score": 1.0,
          "threshold": 0.85,
          "reason": "weighted jaccard; best=1.000"
        }
      ],
      "passed_all": true
    }
  ]
}