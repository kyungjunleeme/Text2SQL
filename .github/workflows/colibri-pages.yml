name: Build & Deploy dbt-colibri to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          python -m pip install --user uv
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # 의존성 설치 (pyproject.toml / uv.lock 기반)
      - name: Sync deps
        run: |
          uv venv
          uv sync

      # dbt를 duckdb 타겟으로 빌드/문서 생성 (colibri가 duckdb만 지원)
      - name: Build NYC DuckDB dataset (nyc.trips_small)
        if: ${{ matrix.profile == 'duckdb' }}
        env:
          DUCKDB_PATH: data/nyc_taxi.duckdb
        shell: bash
        run: |
          mkdir -p data
          uv run python scripts/nyc_to_duckdb.py
          # sanity check: 테이블 존재/카운트 확인
          python - <<'PY'
          import duckdb
          con = duckdb.connect('data/nyc_taxi.duckdb')
          print('tables:', con.sql("select table_schema, table_name from information_schema.tables where table_schema='nyc'").fetchall())
          print('count trips_small:', con.sql("select count(*) from nyc.trips_small").fetchall())
          PY


      - name: Build dbt artifacts (duckdb)
        if: ${{ matrix.profile == 'duckdb' }}
        env:
          DBT_ROOT: ${{ github.workspace }}
          DBT_PROFILES_DIR: ./dbt
          DUCKDB_PATH: data/nyc_taxi.duckdb   # profiles.yml 기본값과 일치
        run: |
          uv run dbt build --project-dir dbt --target duck
          uv run dbt compile --project-dir dbt --target duck
          uv run dbt docs generate --project-dir dbt --target duck

      # colibri로 리니지 사이트 생성 (dbt/dist)
      - name: Generate colibri site
        working-directory: dbt
        run: uv run colibri generate

      # Pages 아티팩트 업로드 (dbt/dist 전체)
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dbt/dist

      # Pages 배포
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
